# Copyright The OpenTelemetry Authors
# SPDX-License-Identifier: Apache-2.0

params:
  # excluded namespaces will not be generated
  excluded_namespaces: [ios, aspnetcore, signalr, android, dotnet, jvm, kestrel, v8js, veightjs, go, nodejs]

  # excluded attributes will be commented out in the generated code
  # this behavior is fully controlled by jinja templates
  excluded_attributes: ["messaging.client_id"]

  stable_package_name: opentelemetry.semconv

  # "https://opentelemetry.io/schemas/<SEMCONV_VERSION_TAG>"
  # this is provided from the command line
  schema_url: ""

templates:
  - pattern: schema_url-h.j2
    filter: .
    application_mode: single
  - pattern: semantic_attributes-h.j2
    filter: >
      semconv_grouped_attributes({
        "exclude_root_namespace": $excluded_namespaces,
        "exclude_stability": if $filter == "any" then [] else ["experimental"] end,
      })
      | map({
          root_namespace: .root_namespace,
          attributes: .attributes,
          output: $output,
          stable_package_name: $stable_package_name + ".attributes",
          filter: $filter,
          excluded_attributes: $excluded_attributes[]
      })
    application_mode: each
  - pattern: semantic_metrics-h.j2
    filter: >
      semconv_grouped_metrics({
        "exclude_root_namespace": $excluded_namespaces,
        "exclude_stability": if $filter == "any" then [] else ["experimental"] end,
      })
      | map({
        root_namespace: .root_namespace,
        metrics: .metrics,
        output: $output,
        stable_package_name: $stable_package_name + ".metrics",
        filter: $filter
      })
    application_mode: each

text_maps:
  cpp_types:
    int: int
    double: double
    boolean: bool
    string: const char *
    string[]: const char *[]
    template[string]: const char *
    template[string[]]: const char *[]

  cpp_sync_support:
    counter: true
    histogram: true
    updowncounter: true
    gauge: false

  cpp_sync_instrument_to_type:
    counter: metrics::Counter
    histogram: metrics::Histogram
    updowncounter: metrics::UpDownCounter
    # Not supported yet
    gauge: metrics::Gauge

  cpp_sync_instrument_to_factory:
    counter: CreateUInt64Counter
    histogram: CreateUInt64Histogram
    updowncounter: CreateInt64UpDownCounter
    # Not supported yet
    gauge: CreateUInt64Gauge

  cpp_async_support:
    counter: true
    histogram: false
    updowncounter: true
    gauge: true

  cpp_async_instrument_to_type:
    counter: metrics::ObservableInstrument
    # Not supported yet
    histogram: metrics::ObservableInstrument
    updowncounter: metrics::ObservableInstrument
    gauge: metrics::ObservableInstrument

  cpp_async_instrument_to_factory:
    counter: CreateInt64ObservableCounter
    # Not supported yet
    histogram: CreateInt64ObservableHistogram
    updowncounter: CreateInt64ObservableUpDownCounter
    gauge: CreateInt64ObservableGauge

comment_formats:
  cpp:
    format: html
    header: "/**"
    prefix: " * "
    footer: " */"
    indent_type: Space
    trim: true
    remove_trailing_dots: false
    enforce_trailing_dots: false
    old_style_paragraph: true
    omit_closing_li: false
    inline_code_snippet: "@code {{code}} @endcode"
    block_code_snippet: "@verbatim {{code}} @endverbatim"
default_comment_format: cpp

whitespace_control:
  trim_blocks: true
  lstrip_blocks: true
  keep_trailing_newline: true

